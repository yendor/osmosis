<?php
require_once 'PHPUnit/Framework.php';

require_once '../osmosis.php';

/**
 * Test class for Osmosis.
 * Generated by PHPUnit on 2010-06-04 at 23:48:09.
 */
class OsmosisTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Osmosis
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->object = new Osmosis;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    public function testLexerHeading()
    {
		$this->object->LoadFile('./text/heading.txt');
		$this->object->Lexer();
		$result = $this->object->GetIntermediateCode();
		$expected = array(Osmosis::HEADING_TOKEN, "Heading");
		$this->assertEquals($expected, $result);
	}

	public function testParserHeading()
    {
		$this->object->LoadFile('./text/heading.txt');
		$this->object->Lexer();
		$result = $this->object->Parser();
		$expected = "<h1>Heading</h1>\n";
		$this->assertEquals($expected, $result);
	}

	public function testLexerCode()
	{
		$this->object->LoadFile('./text/code.txt');
		$this->object->Lexer();
		$result = $this->object->GetIntermediateCode();
		$expected = array(Osmosis::CODE_START_TOKEN, "code","more code","more code", "", "even more code", Osmosis::CODE_END_TOKEN);
		$this->assertEquals($expected, $result);
	}

	public function testParserCode()
    {
		$this->object->LoadFile('./text/code.txt');
		$this->object->Lexer();
		$result = $this->object->Parser();
		$expected = "<pre>code\nmore code\nmore code\n\neven more code\n</pre>\n";
		$this->assertEquals($expected, $result);
	}

	public function testLexerPara()
	{
		$this->object->LoadFile('./text/para.txt');
		$this->object->Lexer();
		$result = $this->object->GetIntermediateCode();
		$expected = array(Osmosis::PARA_START_TOKEN, "some random text", Osmosis::PARA_END_TOKEN);
		$this->assertEquals($expected, $result);
	}

	public function testParserPara()
    {
		$this->object->LoadFile('./text/para.txt');
		$this->object->Lexer();
		$result = $this->object->Parser();
		$expected = "<p>some random text\n</p>\n";
		$this->assertEquals($expected, $result);
	}

	public function testLexerComplete()
	{
		$this->object->LoadFile('./text/complete.txt');
		$this->object->Lexer();
		$result = $this->object->GetIntermediateCode();
		$expected = array(Osmosis::HEADING_TOKEN, "Heading", Osmosis::PARA_START_TOKEN, "some random text", 'more text same paragraph', Osmosis::PARA_END_TOKEN, Osmosis::CODE_START_TOKEN, "code","more code","more code", "", "even more code", Osmosis::CODE_END_TOKEN);
		$this->assertEquals($expected, $result);
    }

	public function testParserComplete()
    {
		$this->object->LoadFile('./text/complete.txt');
		$this->object->Lexer();
		$result = $this->object->Parser();
		$expected = "<h1>Heading</h1>\n<p>some random text\nmore text same paragraph\n</p>\n<pre>code\nmore code\nmore code\n\neven more code\n</pre>\n";
		$this->assertEquals($expected, $result);
	}
}
